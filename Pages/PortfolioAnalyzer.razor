@page "/portfolio-analyzer"

@inject FinanceAnalyzer FinanceAnalyzer
@using FinPorfolioAnylizer.Data
@using MudBlazor

<h1>Anylize your portfolio</h1>

<div class="predefined-portfolio-selection">
    <MudCard Class="m-4">
        <MudCardContent>
            <MudText Typo="Typo.h5">Check predefined examples</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudGrid>
                <MudItem xs="8" Class="d-flex align-center">
                    <MudText>If you don't know how to fill portfolio you can select one of predefined examples.</MudText>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect Style="height: 50px" T="Portfolio" @bind-Value="_displayedPortfolio" Variant="Variant.Outlined" Class="m-1">
                        <MudSelectItem Value="@(CashOnly_Portfolio)">Cash Only Portfolio</MudSelectItem>
                        <MudSelectItem Value="@(Balansed_Portfolio)">Balanced Portfolio</MudSelectItem>
                        <MudSelectItem Value="@(User_Portfolio)">Your Portfolio</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudCardActions>
    </MudCard>
</div>

<EditForm Model="@_displayedPortfolio">
    <MudPaper Class="p-4">
        <MudTabs>
            <MudTabPanel Text="Customer Info">
                <MudTextField @bind-Value="@_displayedPortfolio.CustomerInfo.Age" Label="Age" Variant="Variant.Outlined" Adornment="Adornment.Start" />
            </MudTabPanel>
            <MudTabPanel Text="Assets">
                <MudTable Items="@_displayedPortfolio.Assets" FixedHeader="true" HorizontalScrollbar="true" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Asset Type</MudTh>
                        <MudTh>Term of Asset</MudTh>
                        <MudTh>Currency</MudTh>
                        <MudTh>Region</MudTh>
                        <MudTh>Amount</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="item">
                        <MudTd>
                            <MudTextField @bind-Value="@item.Name" Immediate="true" Variant="Variant.Text" />
                        </MudTd>
                        <MudTd>
                            <MudSelect T="AssetType" @bind-Value="@item.AssetType">
                                @foreach (AssetType assetType in Enum.GetValues(typeof(AssetType)))
                                {
                                    <MudSelectItem Value="@assetType">@assetType</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd>
                            <MudSelect T="TermOfAsset" @bind-Value="@item.TermOfAsset">
                                @foreach (TermOfAsset termOfAsset in Enum.GetValues(typeof(TermOfAsset)))
                                {
                                    <MudSelectItem Value="@termOfAsset">@termOfAsset</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Currency">
                            <MudSelect T="Currency" @bind-Value="@item.Currency">
                                @foreach (Currency currency in Enum.GetValues(typeof(Currency)))
                                {
                                    <MudSelectItem Value="@currency">@currency</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd>
                            <MudSelect T="Region" @bind-Value="@item.Region">
                                @foreach (Region region in Enum.GetValues(typeof(Region)))
                                {
                                    <MudSelectItem Value="@region">@region</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd>
                            <MudNumericField @bind-Value="@item.Amount" Immediate="true" Variant="Variant.Text" />
                        </MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Secondary" Variant="Variant.Outlined" OnClick="@(() => RemoveAsset(item))"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                <MudIconButton Icon="@Icons.Material.Filled.Add"
                               Color="Color.Primary"
                               Variant="Variant.Outlined"
                               OnClick="@AddNewAsset"
                               aria-label="Add"
                               Class="mt-2">
                </MudIconButton>
            </MudTabPanel>
            <MudTabPanel Text="Analyzes">
                <MudButton OnClick="@SendMessage" Variant="Variant.Filled" Color="Color.Primary">Analyze</MudButton>
                <MudPaper Class="p-1">
                    @if (isLoading)
                    {
                        <MudProgressCircular Color="Color.Info" Indeterminate="true" />
                    }
                    else
                    {
                        <MudTextField T="string" Label="Response" Variant="Variant.Outlined" Text="@response" Lines="15" />
                    }
                </MudPaper>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
</EditForm>

@code {
    @code {
        private bool isLoading = false;
        private string response = "";

        private readonly Portfolio CashOnly_Portfolio = new Portfolio
        {
            CustomerInfo = new CustomerInfo()
            {
                Age = 27
            },
            Assets = new List<Asset>
            {
                new Asset(
                    "Mono Deposit",
                    AssetType.Deposit,
                    TermOfAsset.UpTo3Months,
                    Currency.UAH,
                    Region.Ukraine,
                    10000),
                 new Asset(
                    "Mono Account",
                    AssetType.CurrentAccount,
                    TermOfAsset.Current,
                    Currency.UAH,
                    Region.Ukraine,
                    50000),
                    new Asset(
                        "Cash euro",
                        AssetType.Cash,
                        TermOfAsset.Current,
                        Currency.USD,
                        Region.Ukraine,
                        1000
                    )
            }
        };

        private readonly Portfolio Balansed_Portfolio = new Portfolio()
        {
            CustomerInfo = new CustomerInfo
            {
                Age = 27,
            },
            Assets = new List<Asset>
            {
                 new Asset(
                    "Mono Deposit",
                    AssetType.Deposit,
                    TermOfAsset.UpTo3Months,
                    Currency.UAH,
                    Region.Ukraine,
                    10000),
                 new Asset(
                    "Mono Account",
                    AssetType.CurrentAccount,
                    TermOfAsset.Current,
                    Currency.USD,
                    Region.Ukraine,
                    1000),
                new Asset(
                    "Cash euro",
                    AssetType.Cash,
                    TermOfAsset.Current,
                    Currency.EURO,
                    Region.Ukraine,
                    1000
                ),
                new Asset(
                    "Ukraine Bonds",
                    AssetType.Bonds,
                    TermOfAsset.From1To3Years,
                    Currency.UAH,
                    Region.Ukraine,
                    40000
                ),
                new Asset(
                    "Land",
                    AssetType.RealEstate,
                    TermOfAsset.From1To3Years,
                    Currency.UAH,
                    Region.Ukraine,
                    100000
                ),
                new Asset(
                    "ETF S&P500",
                    AssetType.ETF_Long,
                    TermOfAsset.MoreThan10Years,
                    Currency.USD,
                    Region.US,
                    5000
                ),
                new Asset(
                    "ETF Word",
                    AssetType.ETF_Long,
                    TermOfAsset.MoreThan10Years,
                    Currency.USD,
                    Region.Asia,
                    1000
                ),
                new Asset(
                    "ETF Bond US",
                    AssetType.ETF_Long,
                    TermOfAsset.MoreThan10Years,
                    Currency.USD,
                    Region.US,
                    2000
                )
            }
        };

        private readonly Portfolio User_Portfolio = new Portfolio();

        private Portfolio _displayedPortfolio;

        protected override void OnInitialized()
        {
            _displayedPortfolio = User_Portfolio;
        }

        private void AddNewAsset()
        {
            _displayedPortfolio.Assets.Add(new Asset("", AssetType.Cash, TermOfAsset.Current, Currency.UAH, Region.Ukraine, 0));
        }

        private void RemoveAsset(Asset asset)
        {
            _displayedPortfolio.Assets.Remove(asset);
        }

        private async Task SendMessage()
        {
            isLoading = true;

            try
            {
                response = await FinanceAnalyzer.AnalyzePortfolio(_displayedPortfolio);
            }
            finally
            {
                isLoading = false;
            }
        }
    }
}
