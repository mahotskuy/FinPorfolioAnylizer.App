@page "/portfolio-analyzer"

@inject FinanceAnalyzer FinanceAnalyzer
@    using FinPortfolioAnalyzer.Data
@    using MudBlazor

<h1>Anylize your portfolio</h1>

<div class="predefined-portfolio-selection">
    <MudCard Class="m-4">
        <MudCardContent>
            <MudText Typo="Typo.h5">Check predefined examples</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudGrid>
                <MudItem xs="8" Class="d-flex align-center">
                    <MudText>If you don't know how to fill portfolio you can select one of predefined examples.</MudText>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect Style="height: 50px" T="Portfolio" @bind-Value="_displayedPortfolio" Variant="Variant.Outlined" Class="m-1">
                        <MudSelectItem Value="@(CashOnly_Portfolio)">Cash Only Portfolio</MudSelectItem>
                        <MudSelectItem Value="@(Balansed_Portfolio)">Balanced Portfolio</MudSelectItem>
                        <MudSelectItem Value="@(User_Portfolio)">Your Portfolio</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudCardActions>
    </MudCard>
</div>

<EditForm Model="@_displayedPortfolio">
    <MudPaper Class="p-4">
        <MudTabs>
            <MudTabPanel Text="Customer Info">
                <MudTextField @bind-Value="@_displayedPortfolio.CustomerInfo.Age" Label="Age" Variant="Variant.Outlined" Adornment="Adornment.Start" />
                <MudSelect T="RiskTolerance" Label="Investor Risk Tolerance Level" @bind-Value="_displayedPortfolio.CustomerInfo.RiskTolerance" Variant="Variant.Outlined">
                    @foreach (RiskTolerance riskTolerance in Enum.GetValues(typeof(RiskTolerance)))
                    {
                        <MudSelectItem Value="@riskTolerance">@riskTolerance</MudSelectItem>
                    }
                </MudSelect>
                <FinPortfolioAnalyzer.Components.Money MoneyValue="@_displayedPortfolio.CustomerInfo.AnnualIncome" Label="Annual Income" Variant="Variant.Outlined"></FinPortfolioAnalyzer.Components.Money>
                <FinPortfolioAnalyzer.Components.Money MoneyValue="@_displayedPortfolio.CustomerInfo.MonthlyExpenses" Label="Monthly Expenses" Variant="Variant.Outlined"></FinPortfolioAnalyzer.Components.Money>
                <FinPortfolioAnalyzer.Components.Money MoneyValue="@_displayedPortfolio.CustomerInfo.TotalLiabilities" Label="Total Liabilities" Variant="Variant.Outlined"></FinPortfolioAnalyzer.Components.Money>
            </MudTabPanel>
            <MudTabPanel Text="Financial Goals">
                <MudText Typo="Typo.h5">Financial Goals</MudText>
                <MudTable Items="@_displayedPortfolio.FinancialGoals" FixedHeader="true" HorizontalScrollbar="true" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>Goal Name</MudTh>
                        <MudTh>Target Amount</MudTh>
                        <MudTh>Target Date</MudTh>
                        <MudTh>Priority Level</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="goal">
                        <MudTd>
                            <MudTextField @bind-Value="@goal.GoalName" Immediate="true" Variant="Variant.Text" />
                        </MudTd>
                        <MudTd>
                            <FinPortfolioAnalyzer.Components.Money MoneyValue="@goal.TargetAmount" Label="Target Amount"></FinPortfolioAnalyzer.Components.Money>
                        </MudTd>
                        <MudTd>
                            <MudDatePicker @bind-Date="@goal.TargetDate" />
                        </MudTd>
                        <MudTd>
                            <MudSlider Ticks="@true" TicksSnapBounds="1" Step="1" @bind-Value="@goal.PriorityLevel" Min="1" Max="5" />
                        </MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Secondary" Variant="Variant.Outlined" OnClick="@(() => RemoveGoal(goal))"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                <MudIconButton Icon="@Icons.Material.Filled.Add"
                               Color="Color.Primary"
                               Variant="Variant.Outlined"
                               OnClick="@AddNewGoal"
                               aria-label="Add"
                               Class="mt-2">
                </MudIconButton>
            </MudTabPanel>
            <MudTabPanel Text="Assets">
                <MudTable Items="@_displayedPortfolio.Assets" FixedHeader="true" HorizontalScrollbar="true" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Asset Type</MudTh>
                        <MudTh>Term of Asset</MudTh>
                        <MudTh>Region</MudTh>
                        <MudTh>Amount</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="item">
                        <MudTd>
                            <MudTextField @bind-Value="@item.Name" Immediate="true" Variant="Variant.Text" />
                        </MudTd>
                        <MudTd>
                            <MudSelect T="AssetType" @bind-Value="@item.AssetType">
                                @foreach (AssetType assetType in Enum.GetValues(typeof(AssetType)))
                                {
                                    <MudSelectItem Value="@assetType">@assetType</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd>
                            <MudSelect T="TermOfAsset" @bind-Value="@item.TermOfAsset">
                                @foreach (TermOfAsset termOfAsset in Enum.GetValues(typeof(TermOfAsset)))
                                {
                                    <MudSelectItem Value="@termOfAsset">@termOfAsset</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd>
                            <MudSelect T="Region" @bind-Value="@item.Region">
                                @foreach (Region region in Enum.GetValues(typeof(Region)))
                                {
                                    <MudSelectItem Value="@region">@region</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd>
                            <FinPortfolioAnalyzer.Components.Money MoneyValue="@item.Amount" Label="Amount"></FinPortfolioAnalyzer.Components.Money>
                        </MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Secondary" Variant="Variant.Outlined" OnClick="@(() => RemoveAsset(item))"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                <MudIconButton Icon="@Icons.Material.Filled.Add"
                               Color="Color.Primary"
                               Variant="Variant.Outlined"
                               OnClick="@AddNewAsset"
                               aria-label="Add"
                               Class="mt-2">
                </MudIconButton>
            </MudTabPanel>
            <MudTabPanel Text="Analyzes">
                <MudButton OnClick="@SendMessage" Variant="Variant.Filled" Color="Color.Primary">Analyze</MudButton>
                <MudPaper Class="p-1">
                    @if (isLoading)
                    {
                        <MudProgressCircular Color="Color.Info" Indeterminate="true" />
                    }
                    else
                    {
                        <MudTextField T="string" Label="Response" ReadOnly="true" Variant="Variant.Outlined" Text="@response" Lines="15" />
                    }
                </MudPaper>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
</EditForm>

@code {
    @code {
        private bool isLoading = false;
        private string response = "";

        private readonly Portfolio CashOnly_Portfolio = new Portfolio
        {
            CustomerInfo = new CustomerInfo()
            {
                Age = 27,
                RiskTolerance = RiskTolerance.Low,
                AnnualIncome = new MoneyValue(1500, Currency.USD),
                MonthlyExpenses = new MoneyValue(500, Currency.USD)
            },
            FinancialGoals = new List<FinancialGoal>
            {
                new FinancialGoal()
                {
                    GoalName = "Appartments",
                    TargetAmount= new MoneyValue(1500000, Currency.UAH),
                    TargetDate = DateTime.Now.AddYears(3),
                    PriorityLevel = 1
                },
                new FinancialGoal()
                {
                    GoalName = "Car",
                    TargetAmount= new MoneyValue(10000, Currency.USD),
                    TargetDate = DateTime.Now.AddYears(1),
                    PriorityLevel = 3
                },
                new FinancialGoal()
                {
                    GoalName = "Retirerment",
                    TargetAmount= new MoneyValue(200000, Currency.USD),
                    TargetDate = DateTime.Now.AddYears(30),
                    PriorityLevel = 1
                }
            },
            Assets = new List<Asset>
            {
                new Asset(
                    "Mono Deposit",
                    AssetType.Deposit,
                    TermOfAsset.UpTo3Months,
                    Region.Ukraine,
                    new MoneyValue(10000, Currency.UAH)
                ),
                 new Asset(
                    "Mono Account",
                    AssetType.CurrentAccount,
                    TermOfAsset.Current,
                    Region.Ukraine,
                     new MoneyValue(50000, Currency.UAH)),
                 new Asset(
                    "Cash euro",
                    AssetType.Cash,
                    TermOfAsset.Current,
                    Region.Ukraine,
                    new MoneyValue(1000, Currency.USD)
                )
            }
        };

        private readonly Portfolio Balansed_Portfolio = new Portfolio()
        {
            CustomerInfo = new CustomerInfo
            {
                Age = 27,
                RiskTolerance = RiskTolerance.High,
                AnnualIncome = new MoneyValue(1500, Currency.USD),
                MonthlyExpenses = new MoneyValue(500, Currency.USD)
            },
            FinancialGoals = new List<FinancialGoal>
            {
                new FinancialGoal()
                {
                    GoalName = "Appartments",
                    TargetAmount= new MoneyValue(1700000, Currency.UAH),
                    TargetDate = DateTime.Now.AddYears(3),
                    PriorityLevel = 1
                },
                new FinancialGoal()
                {
                    GoalName = "Car",
                    TargetAmount= new MoneyValue(10000, Currency.USD),
                    TargetDate = DateTime.Now.AddYears(1),
                    PriorityLevel = 3
                },
                new FinancialGoal()
                {
                    GoalName = "Retirerment",
                    TargetAmount= new MoneyValue(200000, Currency.USD),
                    TargetDate = DateTime.Now.AddYears(30),
                    PriorityLevel = 1
                }
            },
            Assets = new List<Asset>
            {
                 new Asset(
                    "Mono Deposit",
                    AssetType.Deposit,
                    TermOfAsset.UpTo3Months,
                    Region.Ukraine,
                    new MoneyValue(200000, Currency.UAH)),
                 new Asset(
                    "Mono Account",
                    AssetType.CurrentAccount,
                    TermOfAsset.Current,
                    Region.Ukraine,
                    new MoneyValue(1000, Currency.USD)),
                new Asset(
                    "Cash euro",
                    AssetType.Cash,
                    TermOfAsset.Current,
                    Region.Ukraine,
                    new MoneyValue(1000, Currency.EURO)
                ),
                new Asset(
                    "Ukraine Bonds",
                    AssetType.Bonds,
                    TermOfAsset.From1To3Years,
                    Region.Ukraine,
                     new MoneyValue(40000, Currency.UAH)
                ),
                new Asset(
                    "Land",
                    AssetType.RealEstate,
                    TermOfAsset.From1To3Years,
                    Region.Ukraine,
                    new MoneyValue(100000, Currency.UAH)
                ),
                new Asset(
                    "ETF S&P500",
                    AssetType.ETF_Long,
                    TermOfAsset.MoreThan10Years,
                    Region.US,
                    new MoneyValue(5000, Currency.USD)
                ),
                new Asset(
                    "ETF Word",
                    AssetType.ETF_Long,
                    TermOfAsset.MoreThan10Years,
                    Region.Asia,
                    new MoneyValue(1000, Currency.USD)
                ),
                new Asset(
                    "ETF Bond US",
                    AssetType.ETF_Long,
                    TermOfAsset.MoreThan10Years,
                    Region.US,
                    new MoneyValue(2000, Currency.USD)
                )
            }
        };

        private readonly Portfolio User_Portfolio = new Portfolio();

        private Portfolio _displayedPortfolio;

        protected override void OnInitialized()
        {
            _displayedPortfolio = User_Portfolio;
        }

        private void AddNewAsset()
        {
            _displayedPortfolio.Assets.Add(new Asset("", AssetType.Cash, TermOfAsset.Current, Region.Ukraine, new MoneyValue()));
        }

        private void RemoveAsset(Asset asset)
        {
            _displayedPortfolio.Assets.Remove(asset);
        }

        void AddNewGoal()
        {
            _displayedPortfolio.FinancialGoals.Add(new FinancialGoal());
        }

        void RemoveGoal(FinancialGoal goal)
        {
            _displayedPortfolio.FinancialGoals.Remove(goal);
        }

        private async Task SendMessage()
        {
            isLoading = true;

            try
            {
                response = await FinanceAnalyzer.AnalyzePortfolio(_displayedPortfolio);
            }
            finally
            {
                isLoading = false;
            }
        }
    }
}
