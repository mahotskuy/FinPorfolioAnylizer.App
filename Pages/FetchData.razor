@page "/fetchdata"

@inject FinanceAnalyzer FinanceAnalyzer
@using FinPorfolioAnylizer.Data
@using MudBlazor

<h1>Anylize your portfolio</h1>

<EditForm Model="@portfolio">
    <MudPaper Class="p-4">
        <MudTabs>
            <MudTabPanel Text="Customer Info">
                <MudTextField @bind-Value="@portfolio.CustomerInfo.Age" Label="Age" Variant="Variant.Outlined" Adornment="Adornment.Start" />
            </MudTabPanel>
            <MudTabPanel Text="Assets">
                <MudTable Items="@Balansed_portf.Assets" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Asset Type</MudTh>
                        <MudTh>Term of Asset</MudTh>
                        <MudTh>Currency</MudTh>
                        <MudTh>Region</MudTh>
                        <MudTh>Amount</MudTh>
                        <MudTh>
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="@AddNewAsset">Add</MudButton>
                        </MudTh>
                    </HeaderContent>
                    <RowTemplate Context="item">
                        <MudTd DataLabel="Name">
                            <MudTextField @bind-Value="@item.Name" Immediate="true" Variant="Variant.Text" />
                        </MudTd>
                        <MudTd DataLabel="Asset Type">
                            <MudSelect T="AssetType" Label="Asset Type" @bind-Value="@item.AssetType">
                                @foreach (AssetType assetType in Enum.GetValues(typeof(AssetType)))
                                {
                                    <MudSelectItem Value="@assetType">@assetType</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Term of Asset">
                            <MudSelect T="TermOfAsset" Label="Term of Asset" @bind-Value="@item.TermOfAsset">
                                @foreach (TermOfAsset termOfAsset in Enum.GetValues(typeof(TermOfAsset)))
                                {
                                    <MudSelectItem Value="@termOfAsset">@termOfAsset</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Currency">
                            <MudSelect T="Currency" Label="Currency" @bind-Value="@item.Currency">
                                @foreach (Currency currency in Enum.GetValues(typeof(Currency)))
                                {
                                    <MudSelectItem Value="@currency">@currency</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Region">
                            <MudSelect T="Region" Label="Region" @bind-Value="@item.Region">
                                @foreach (Region region in Enum.GetValues(typeof(Region)))
                                {
                                    <MudSelectItem Value="@region">@region</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Amount">
                            <MudNumericField @bind-Value="@item.Amount" Immediate="true" Variant="Variant.Text" />
                        </MudTd>
                        <MudTd>
                            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="@(() => RemoveAsset(item))">Delete</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTabPanel>
            <MudTabPanel Text="Analyzes">
                <MudButton OnClick="@SendMessage" Variant="Variant.Filled" Color="Color.Primary">Analyze</MudButton>
                <MudText>Response:</MudText>
                @if (isLoading)
                {
                    <MudProgressCircular Color="Color.Info" Indeterminate="true" />
                }
                else
                {
                    <MudTextField T="string" Label="Response" Variant="Variant.Text" Text="@response" Lines="15" />
                }
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
</EditForm>

@code {
    @code {
        private bool isLoading = false;
        private string response = "";

        private readonly Portfolio CASH_ONLY_PORTF = new Portfolio
        {
            CustomerInfo = new CustomerInfo()
            {
                Age = 27
            },
            Assets = new List<Asset>
            {
                new Asset(
                    "Mono Deposit",
                    AssetType.Deposit,
                    TermOfAsset.UpTo3Months,
                    Currency.UAH,
                    Region.Ukraine,
                    10000),
                 new Asset(
                    "Mono Account",
                    AssetType.CurrentAccount,
                    TermOfAsset.Current,
                    Currency.UAH,
                    Region.Ukraine,
                    50000),
                    new Asset(
                        "Cash euro",
                        AssetType.Cash,
                        TermOfAsset.Current,
                        Currency.USD,
                        Region.Ukraine,
                        1000
                    )
            }
        };

        private readonly Portfolio Balansed_portf = new Portfolio()
        {
            CustomerInfo = new CustomerInfo
            {
                Age = 27,
            },
            Assets = new List<Asset>
            {
                 new Asset(
                    "Mono Deposit",
                    AssetType.Deposit,
                    TermOfAsset.UpTo3Months,
                    Currency.UAH,
                    Region.Ukraine,
                    10000),
                 new Asset(
                    "Mono Account",
                    AssetType.CurrentAccount,
                    TermOfAsset.Current,
                    Currency.USD,
                    Region.Ukraine,
                    1000),
                new Asset(
                    "Cash euro",
                    AssetType.Cash,
                    TermOfAsset.Current,
                    Currency.EURO,
                    Region.Ukraine,
                    1000
                ),
                new Asset(
                    "Ukraine Bonds",
                    AssetType.Bonds,
                    TermOfAsset.From1To3Years,
                    Currency.UAH,
                    Region.Ukraine,
                    40000
                ),
                new Asset(
                    "Land",
                    AssetType.RealEstate,
                    TermOfAsset.From1To3Years,
                    Currency.UAH,
                    Region.Ukraine,
                    100000
                ),
                new Asset(
                    "ETF S&P500",
                    AssetType.ETF_Long,
                    TermOfAsset.MoreThan10Years,
                    Currency.USD,
                    Region.US,
                    5000
                ),
                new Asset(
                    "ETF Word",
                    AssetType.ETF_Long,
                    TermOfAsset.MoreThan10Years,
                    Currency.USD,
                    Region.Asia,
                    1000
                ),
                new Asset(
                    "ETF Bond US",
                    AssetType.ETF_Long,
                    TermOfAsset.MoreThan10Years,
                    Currency.USD,
                    Region.US,
                    2000
                )
            }
        };

        private Portfolio portfolio;

        protected override void OnInitialized()
        {
            portfolio = Balansed_portf;
        }


        private void AddNewAsset()
        {
            portfolio.Assets.Add(new Asset("", AssetType.Cash, TermOfAsset.Current, Currency.UAH, Region.Ukraine, 0));
        }

        private void RemoveAsset(Asset asset)
        {
            portfolio.Assets.Remove(asset);
        }

        private async Task SendMessage()
        {
            isLoading = true;

            try
            {
                response = await FinanceAnalyzer.AnalyzePortfolio(portfolio);
            }
            finally
            {
                isLoading = false;
            }
        }
    }
}
