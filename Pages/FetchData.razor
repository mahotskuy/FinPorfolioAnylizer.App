@page "/fetchdata"

@inject FinanceAnalyzer FinanceAnalyzer
@using FinPorfolioAnylizer.Data

<h1>Anylize your portfolio</h1>
<p>This component demonstrates fetching data from a ChatGPT.</p>

<div class="form-container">
    <button @onclick="@SendMessage">Analyze</button>
    <div>
        <label for="response">Response:</label>
    </div>
    <div>
        @if (isLoading)
        {
            <div class="spinner"></div>
        }
        else
        {
            <div>
                <textarea class="full-width" @bind="@response" readonly></textarea>
            </div>
        }
    </div>
</div>

@code {
    @code {
        private bool isLoading = false;
        private string response = "";

        private readonly Portfolio CASH_ONLY_PORTF = new Portfolio
        {
            CustomerInfo = new CustomerInfo()
            {
                Age = 27
            },
            Assets = new List<Asset>
            {
                new Asset(
                    "Mono Deposit",
                    AssetType.Deposit,
                    TermOfAsset.UpTo3Months,
                    Currency.UAH,
                    Region.Ukraine,
                    10000),
                 new Asset(
                    "Mono Account",
                    AssetType.CurrentAccount,
                    TermOfAsset.Current,
                    Currency.UAH,
                    Region.Ukraine,
                    50000),
                    new Asset(
                        "Cash euro",
                        AssetType.Cash,
                        TermOfAsset.Current,
                        Currency.USD,
                        Region.Ukraine,
                        1000
                    )
            }
        };

        private readonly Portfolio Balansed_portf = new Portfolio()
        {
            CustomerInfo = new CustomerInfo
            {
                Age = 27,
            },
            Assets = new List<Asset>
            {
                 new Asset(
                    "Mono Deposit",
                    AssetType.Deposit,
                    TermOfAsset.UpTo3Months,
                    Currency.UAH,
                    Region.Ukraine,
                    10000),
                 new Asset(
                    "Mono Account",
                    AssetType.CurrentAccount,
                    TermOfAsset.Current,
                    Currency.USD,
                    Region.Ukraine,
                    1000),
                new Asset(
                    "Cash euro",
                    AssetType.Cash,
                    TermOfAsset.Current,
                    Currency.EURO,
                    Region.Ukraine,
                    1000
                ),
                new Asset(
                    "Ukraine Bonds",
                    AssetType.Bonds,
                    TermOfAsset.From1To3Years,
                    Currency.UAH,
                    Region.Ukraine,
                    40000
                ),
                new Asset(
                    "Land",
                    AssetType.RealEstate,
                    TermOfAsset.From1To3Years,
                    Currency.UAH,
                    Region.Ukraine,
                    100000
                ),
                new Asset(
                    "ETF S&P500",
                    AssetType.ETF_Long,
                    TermOfAsset.MoreThan10Years,
                    Currency.USD,
                    Region.US,
                    5000
                ),
                new Asset(
                    "ETF Word",
                    AssetType.ETF_Long,
                    TermOfAsset.MoreThan10Years,
                    Currency.USD,
                    Region.Asia,
                    1000
                ),
                new Asset(
                    "ETF Bond US",
                    AssetType.ETF_Long,
                    TermOfAsset.MoreThan10Years,
                    Currency.USD,
                    Region.US,
                    2000
                )
            }
        };

        private async Task SendMessage()
        {
            isLoading = true;

            try
            {
                response = await FinanceAnalyzer.AnalyzePortfolio(Balansed_portf);
            }
            finally
            {
                isLoading = false;
            }
        }
    }
}
